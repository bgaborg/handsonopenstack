heat_template_version: 2014-10-16

description: Software configuration with OS::Heat::SoftwareConfig and SoftwareDeployment

parameters:
  message:
    type: string
    label: Message
    description: Message to inject into user data
    default: Hello world
  image_id:
    type: string
    label: Image ID
    description: Image to be used for compute instance
    default: rhel-7.1-64bit-customized
#    default: cirros0.3.4
  flavor:
    type: string
    label: Flavor
    description: Flavor to be used
    default: m1.small
    constraints:
      - allowed_values: [ m1.tiny, m1.small, m1.medium, m1.large, m1.xlarge ]
        description: Value must be one of m1.tiny, m1.small, m1.medium, m1.large or m1.xlarge.
  public_net:
    type: string
    description: Name of the public network for the compute server
    default: pub_net
  private_net:
    type: string
    description: Name of the private network for the compute server
    default: preservedNetwork
  private_subnet:
    type: string
    description: Name of the private sub network for the compute server
    default: preservedSubnet
  security_group_id:
    type: string
    description: Security group
    default: preservedSecurityGroup

resources:
  server:
    type: OS::Nova::Server
    properties:
      user_data_format: SOFTWARE_CONFIG
      name:
        str_replace:
          template: SoftwareConfig_postfix
          params:
            postfix: { get_param: message }
      key_name: preservedSshKey
      image: { get_param: image_id }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: server_port }

  server_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: private_net }
      fixed_ips:
        - subnet: { get_param: private_subnet }
      security_groups: [{ get_param: security_group_id }]

  server_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: server_port }

  server_init_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs: 
        - name: message
          default: initializing
      config: |
        #!/bin/bash
        echo "This is an important message: $message"

  server_init_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      name: Initialize server
      server: { get_resource: server }
      actions: [ CREATE, UPDATE ]
      config: { get_resource: server_init_config }
      input_values:
        message: { get_param: message }

outputs:
  floating_ip:
    description: The floating IP of the server
    value: { get_attr: [ server_floating_ip, floating_ip_address ] }
  deployment_stdout:
    description: Standard output of the deployment process
    value: { get_attr: [ server_init_deployment, deploy_stdout ] }
