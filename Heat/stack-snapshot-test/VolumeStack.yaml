#    write heat template with a server, port, floating IP and floating IP association
#        networks, image, flavor, security group as parameters
#        output: floating_ip (the actual IP address)

# PUB_NET_ID=$(neutron net-show --name pub_net -F id -f value)
# PRESERVED_NET_ID=$(neutron net-show --name preservedNetwork -F id -f value)
# PRESERVED_SUBNET_ID=$(neutron subnet-show --name preservedSubnet -F id -f value)
# heat stack-create botosjeti --template-file SimpleStack.yaml -P "security_group_id=default;image_id=cirros0.3.2;public_net_id=$PUB_NET_ID;private_net_id=$PRESERVED_NET_ID;private_subnet_id=$PRESERVED_SUBNET_ID"
# or
# heat stack-create STACK_NAME -f SimpleStack.yaml -P "image_id=cirros0.3.4"

heat_template_version: 2014-10-16

description: Simple stack

parameters:
  image_id:
    type: string
    label: Image ID
    description: Image to be used for compute instance
    default: cirros0.3.4
  flavor:
    type: string
    label: Flavor
    description: Flavor to be used
    default: m1.tiny
    constraints:
      - allowed_values: [ m1.tiny, m1.small, m1.medium, m1.large, m1.xlarge ]
        description: Value must be one of m1.tiny, m1.small, m1.medium, m1.large or m1.xlarge.
  private_net:
    type: string
    description: Id of the private network for the compute server
    default: preservedNetwork
  private_subnet:
    type: string
    description: Id of the private sub network for the compute server
    default: preservedSubnet
  public_net:
    type: string
    description: Id of the public network for the compute server
    default: pub_net
  security_group_id:
    type: string
    description: Security group id
    default: preservedSecurityGroup
  volume_type_name:
    type: string
    description: Volume type name
    default: preservedVolumeType
  volume_size:
    type: number
    description: Size of the volume to be created.
    default: 1
    constraints:
      - range: { min: 1, max: 1024 }
        description: must be between 1 and 1024 Gb.
  volume_mountpoint:
    type: string
    description: The location where the volume is exposed on the instance.
    default: /dev/vdc
#  availability_zone_name:
#    type: string
#    description: Availability Zone name
#    default: nova

resources:
 # cinder_volume_type:
 #   type: OS::Cinder::VolumeType
 #   properties:
 #     name: { get_param: volume_type_name }

  cinder_volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
#      availability_zone: { get_param: availability_zone }
#      volume_type: { get_resource: cinder_volume_type }
  server1:
    type: OS::Nova::Server
    properties:
      key_name: preservedSshKey
      image: { get_param: image_id }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: server1_port }

  server1_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: private_net }
      fixed_ips:
        - subnet: { get_param: private_subnet }
      security_groups: [{ get_param: security_group_id }]

  server1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: server1_port }

  cinder_volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: cinder_volume }
      instance_uuid: { get_resource: server1 }
      mountpoint: { get_param: volume_mountpoint }

outputs:
  floating_ip:
    description: The floating IP of the server
    value: { get_attr: [server1_floating_ip, floating_ip_address] }
  instance_ip:
    description: Public IP address of the newly created Nova instance.
    value: { get_attr: [server1, first_address] }
