#    write heat templates of a scaleable application with HA pairs of servers
#        main template with a ResourceGroup with resource type defined in separate template
#        separate template defining a pair of servers
#    create stack via heat cli, list stack resources (deep listing with the "-n" option)
#    update stack with different count values on the ResourceGroup (scale out, scale in)

# PUB_NET_ID=$(neutron net-show --name pub_net -F id -f value)
# PRESERVED_NET_ID=$(neutron net-show --name preservedNetwork -F id -f value)
# PRESERVED_SUBNET_ID=$(neutron subnet-show --name preservedSubnet -F id -f value)
# heat stack-create my-nested-stack --template-file 02_Nested_stack/main.yaml -P "security_group_id=default;image_id=cirros0.3.2;public_net_id=$PUB_NET_ID;private_net_id=$PRESERVED_NET_ID;private_subnet_id=$PRESERVED_SUBNET_ID;server_count=2"
#
# or
# heat stack-create STACK_NAME -f main.yaml -P "server_count=2"
# and for update
# heat stack-update STACK_NAME -f main.yaml -P "server_count=3"

heat_template_version: 2014-10-16

description: Nested stack

parameters:
  image_id:
    type: string
    label: Image ID
    description: Image to be used for compute instance
    default: cirros0.3.4
  flavor:
    type: string
    label: Flavor
    description: Flavor to be used
    default: m1.tiny
    constraints:
      - allowed_values: [ m1.tiny, m1.small, m1.medium, m1.large, m1.xlarge ]
        description: Value must be one of m1.tiny, m1.small, m1.medium, m1.large or m1.xlarge.    
  private_net:
    type: string
    description: Id of the private network for the compute server
    default: preservedNetwork
  private_subnet:
    type: string
    description: Id of the private sub network for the compute server
    default: preservedSubnet
  public_net:
    type: string
    description: Id of the public network for the compute server
    default: pub_net
  security_group_id:
    type: string
    description: Security group id
    default: preservedSecurityGroup
  server_count: 
    type: number
    description: Number of HA server pairs to create

resources:
  ha_resource_group:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: server_count }
      resource_def: 
        type: ha_server_pair.yaml
        properties:
          server_postfix: "%index%"
          image_id: { get_param: image_id }
          flavor: { get_param: flavor }
          private_net: { get_param: private_net }
          private_subnet: { get_param: private_subnet }
          public_net: { get_param: public_net }
          security_group_id: { get_param: security_group_id }

outputs:
  server1_floating_ip: 
    description: Floating IP of the first server
    value: { get_attr: [ha_resource_group, floating_ip1] }
  server2_floating_ip: 
    description: Floating IP of the second server
    value: { get_attr: [ha_resource_group, floating_ip2] } 